#!/bin/bash

myver="0.4"

# include for enviromental settings
source /etc/makepkg.conf

CLEANUP=1

ARGLIST=$@
TARBALL=""
PKGDEST=""
LOGDEST=""
CONFIGFILE="/etc/mkchroot.conf"
PACMANFILE=""
CREATEIMG=""
USEIMG=""

# message functions
# TODO these are the same as makepkg functions, so make them
# common in /usr/share/archlinux

plain() {
	if [ "$USE_COLOR" = "Y" -o "$USE_COLOR" = "y" ]; then
		echo -e "    \033[1;1m$1\033[1;0m" >&2
	else
		echo "    $1" >&2
	fi
}

msg() {
	if [ "$USE_COLOR" = "Y" -o "$USE_COLOR" = "y" ]; then
		echo -e "\033[1;32m==>\033[1;0m \033[1;1m$1\033[1;0m" >&2
	else
		echo "==> $1" >&2
	fi
}

warning() {
	if [ "$USE_COLOR" = "Y" -o "$USE_COLOR" = "y" ]; then
		echo -e "\033[1;33m==> WARNING:\033[1;0m \033[1;1m$1\033[1;0m" >&2
	else
		echo "==> WARNING: $1" >&2
	fi
}

error() {
	if [ "$USE_COLOR" = "Y" -o "$USE_COLOR" = "y" ]; then
		echo -e "\033[1;31m==> ERROR:\033[1;0m \033[1;1m$1\033[1;0m" >&2
	else
		echo "==> ERROR: $1" >&2
	fi
	exit 2
}

# wakachroot functions

cleanup() {
	if [ -d $WAKA_ROOT_DIR/$WAKA_CHROOT_DIR ]; then
		msg "Removing old virtual root... (This may take a while)"
		rm -rf $WAKA_ROOT_DIR/$WAKA_CHROOT_DIR
	fi
}

makeroot() {
	cleanup
	mkdir $WAKA_ROOT_DIR/$WAKA_CHROOT_DIR
}

fs_mount() {
	local ret=0
	msg "Mounting sysfs..."
		mount -t sysfs  sysfs  $WAKA_ROOT_DIR/$WAKA_CHROOT_DIR/sys || ret=1
	msg "Mounting procfs..."
		mount -t proc   proc   $WAKA_ROOT_DIR/$WAKA_CHROOT_DIR/proc || ret=1
#		mount -t usbfs  usbfs  $WAKA_ROOT_DIR/$WAKA_CHROOT_DIR/proc/bus/usb || ret=1
	msg "Copying devfs..."
		cp -a /dev $WAKA_ROOT_DIR/$WAKA_CHROOT_DIR/dev || ret=1

	return $ret
}

fs_umount() {
	local ret=0
	msg "Umounting sysfs..."
		umount $WAKA_ROOT_DIR/$WAKA_CHROOT_DIR/sys || ret=1
	msg "Umounting procfs..."
#		umount $WAKA_ROOT_DIR/$WAKA_CHROOT_DIR/proc/bus/usb || ret=1
		umount $WAKA_ROOT_DIR/$WAKA_CHROOT_DIR/proc || ret=1

	return $ret
}

fs_bind() {
	local ret=0
	msg "Using global package cache..."
		mkdir -p $WAKA_ROOT_DIR/$WAKA_CHROOT_DIR/var/cache/pacman/pkg || ret=1

		# Try hard linking- if that doesn't work, try copying
		cp -l /var/cache/pacman/pkg/* $WAKA_ROOT_DIR/$WAKA_CHROOT_DIR/var/cache/pacman/pkg/ || cp /var/cache/pacman/pkg/* $WAKA_ROOT_DIR/$WAKA_CHROOT_DIR/var/cache/pacman/pkg/ || ret=1

	return $ret
}

fs_unbind() {
	rsync -a $WAKA_ROOT_DIR/$WAKA_CHROOT_DIR/var/cache/pacman/pkg/* /var/cache/pacman/pkg/
	rm $WAKA_ROOT_DIR/$WAKA_CHROOT_DIR/var/cache/pacman/pkg/*
}

quickinst() {
	if [ -f /tmp/packages.txt ]; then
		rm /tmp/packages.txt
	fi
	msg "Running ${QUIKINST_LOCATION} ftp ${WAKA_ROOT_DIR}/${WAKA_CHROOT_DIR} ${PACKAGE_MIRROR_CURRENT}"
	. $QUIKINST_LOCATION ftp $WAKA_ROOT_DIR/$WAKA_CHROOT_DIR $PACKAGE_MIRROR_CURRENT || return 1
}

conf_update() {
	cp -L /etc/resolv.conf $WAKA_ROOT_DIR/$WAKA_CHROOT_DIR/etc || return 1

	if [ "$PACMANFILE" = "" ]; then
		echo "[current]" > $WAKA_ROOT_DIR/$WAKA_CHROOT_DIR/etc/pacman.d/current
		echo "Server = ${PACKAGE_MIRROR_CURRENT}" >> $WAKA_ROOT_DIR/$WAKA_CHROOT_DIR/etc/pacman.d/current

		echo "[extra]" > $WAKA_ROOT_DIR/$WAKA_CHROOT_DIR/etc/pacman.d/extra
		echo "Server = ${PACKAGE_MIRROR_EXTRA}" >> $WAKA_ROOT_DIR/$WAKA_CHROOT_DIR/etc/pacman.d/extra
	else
		cp $PACMANFILE $WAKA_ROOT_DIR/$WAKA_CHROOT_DIR/etc/pacman.conf || return 1
	fi
}

# usage function
usage() {
	echo "mkchroot version $myver"
	echo "usage: $0 [options] <source package>"
	echo "options:"
	echo "  -h, --help        This help"
	echo "  -w <destdir>      Write package to <destdir> instead of the working dir"
	echo "  -l <destdir>      Write build log to <destdir> instead of the working dir"
	echo "  -o <configfile>   Use an alternate config file"
	echo "  -p <pacmanconfig> Use an alternate pacman config file"
	echo "  -c <imgfile>      Create an image to use in subsequent builds"
	echo "  -i <imgfile>      Use image as build base"
}

# PROGRAM START

while [ $# -ne 0 ]; do
	case $1 in
		--help)
			usage
			exit 0
			;;
		--*)
			usage
			exit 1
			;;
		-*)
			OPTIND=0
			while getopts "hw:l:p:o:c:i:" opt; do
				case $opt in
					h)
						usage
						exit 0
						;;
					w)
						PKGDEST=$OPTARG
						shift
						;;
					l)
						LOGDEST=$OPTARG
						shift
						;;
					p)
						PACMANFILE=$OPTARG
						shift
						;;
					o)
						CONFIGFILE=$OPTARG
						shift
						;;
					c)
						CREATEIMG=$OPTARG
						shift
						;;
					i)
						USEIMG=$OPTARG
						shift
						;;
					*)
						usage
						exit 1
						;;
				esac
			done
			;;
		*)
			if [ "$TARBALL" = "" ]; then
				TARBALL=$1
			fi
			;;
	esac
	shift
done

if [ ! -f $CONFIGFILE ]; then
	msg "No config file found: $CONFIGFILE"
	usage
	exit 1
fi

# get configuration stuff
source $CONFIGFILE

if [ "$CREATEIMG" != "" ]; then
	if echo $CREATEIMG | grep -v ^/ 2>&1 > /dev/null; then
		CREATEIMG="$(pwd)/$CREATEIMG"
	fi
fi

if [ "$TARBALL" != "" ]; then
	if echo $TARBALL | grep -v ^/ 2>&1 > /dev/null; then
		TARBALL="$(pwd)/$TARBALL"
	fi
fi
if [ \( "$TARBALL" = "" -o ! -f "$TARBALL" \) -a "$CREATEIMG" = "" ]; then
	msg "Source package not found"
	usage
	exit 1
fi

if [ "$PKGDEST" = "" ]; then
	PKGDEST=$DEFAULT_PKGDEST
fi

if [ "$LOGDEST" = "" ]; then
	LOGDEST=$DEFAULT_PKGDEST
fi

makeroot
if [ $? -ne 0 ]; then
	error "Can't create chroot directory"
fi
if [ "$USEIMG" = "" ]; then
	fs_bind
	(quickinst)
	if [ $? -ne 0 ]; then
		fs_unbind
		error "Can't build chroot"
	fi
else
	msg "Extracting image..."
	cd $WAKA_ROOT_DIR/$WAKA_CHROOT_DIR
	tar -xjf $USEIMG
	if [ $? -ne 0 ]; then
		fs_unbind
		error "Can't extract image"
	fi
fi

if [ "$CREATEIMG" != "" ]; then
	msg "Creating image..."
	fs_unbind
	cd $WAKA_ROOT_DIR/$WAKA_CHROOT_DIR
	tar -cjf $CREATEIMG *
	if [ $? -ne 0 ]; then
		cleanup
		error "Can't create image"
	fi
	cleanup
	exit 0
fi

# mount kernel stuff to make system sane
fs_mount
if [ $? -ne 0 ]; then
	fs_umount
	fs_unbind
	cleanup
	error "Problem mounting filesystems"
fi

# copy general configuration from host system
conf_update
if [ $? -ne 0 ]; then
	fs_umount
	fs_unbind
	cleanup
	error "Problem updating configs"
fi

if [ -f $TARBALL ]; then
	mkdir $WAKA_ROOT_DIR/$WAKA_CHROOT_DIR/waka
	cp $TARBALL $WAKA_ROOT_DIR/$WAKA_CHROOT_DIR/waka/ || error "Source tarball not found!"

	cp /usr/share/waka/build $WAKA_ROOT_DIR/$WAKA_CHROOT_DIR/waka/build
	JUSTTARBALL=$(basename $TARBALL)
	sed -i "s|#TARBALL#|${JUSTTARBALL}|g"       $WAKA_ROOT_DIR/$WAKA_CHROOT_DIR/waka/build
	sed -i "s|#KERNEL#|${DEFAULT_KERNEL}|g" $WAKA_ROOT_DIR/$WAKA_CHROOT_DIR/waka/build
	
	chmod +x $WAKA_ROOT_DIR/$WAKA_CHROOT_DIR/waka/build
	msg "Starting to build package..."
	chroot $WAKA_ROOT_DIR/$WAKA_CHROOT_DIR/ /waka/build
	source $WAKA_ROOT_DIR/$WAKA_CHROOT_DIR/waka/PKGBUILD

	mv $WAKA_ROOT_DIR/$WAKA_CHROOT_DIR/waka/$pkgname-$pkgver-$pkgrel.pkg.tar.gz $PKGDEST || warning "Package could not be retrieved!"
	mv $WAKA_ROOT_DIR/$WAKA_CHROOT_DIR/waka/makepkg.log $LOGDEST/$pkgname-$pkgver-$pkgrel.makepkg.log || warning "Logfile could not be retrieved!"
else
	fs_unbind
	fs_unmount
	cleanup
	error "Could not find source tarball!"
fi

fs_unbind
fs_umount

if [ ${CLEANUP} -eq 1 ]; then
	cleanup
fi
